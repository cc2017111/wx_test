<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.xidian.faceToChild.mapper.UserMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!-- 
        根据id查询得到一个user对象
     -->
     <!-- 通过昵称查找用户 -->
    <select id="findUserByNickname"  resultType="com.xidian.faceToChild.po.User">
        select id, role, tel, password, status from user where nickname=#{nickname}
    </select>
    
    <!-- 通过id查找用户 -->
    <select id="findUserById"  resultType="com.xidian.faceToChild.po.User">
        select id, role, tel, password, status from user where id=#{id}
    </select>
    
    <insert id="addUser"  parameterType="com.xidian.faceToChild.po.User"
 useGeneratedKeys="true"  keyColumn="id"  keyProperty="id">
    	insert into user(nickname, role, tel, password, status) values
    	(#{nickName}, #{role}, #{tel}, #{password}, #{status})
    </insert>
    
    <update id="updateUser" parameterType="User">
    update user
    	<set>
    		<if test="nickName != null">nickname = #{nickName},</if>
    		<if test="tel != null">tel = #{tel},</if>
    		<if test="role != null">role = #{role},</if>
    		<if test="password != null">password = #{password},</if>
    		<if test="password != null">status = #{status},</if>
    	</set>
    where id =#{id}
    </update>
    
</mapper>